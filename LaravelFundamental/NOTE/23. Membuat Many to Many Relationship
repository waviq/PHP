Analogi: a. Kita akan membuat relasi antara Artikel dengan Kategori(Tag) sebuah artikel yang akan di posting
         b. Satu Artikel bisa punya beberapa katagori, Satu Katagori bisa punya beberapa Artikel (Many to Many)

Cara membuatnya
1.  File Modelnya
    a.  Model Kategori

        -   Buat class Model Kategori
                php artisan make:model Kategori

        -   Buat inisialisasi nama tabelnya (agar dikenali di database)
                protected $table = 'kategori';

        -   Buat kolom apa saja yang ditugaskan untuk supaya dapat di isi (biar gak terjadi mass assigment)
                protected $fillable = ['namaKategori'];

        -   Buat fungsi relasi Many to Many (ber relasi dg model Artikel)

                public function artikel(){
                    return $this->belongsToMany('App\Artikel');
                }

    b.  Model Artikel

        -   Buat fungsi relasi Many to Many (penanda berelasi dg model Kategori)

                public function Kategori(){
                    return $this->belongsToMany('App\Kategori','detail_kategori')->withTimestamps();
                }

            KETERANGAN:

            -   function Kategori() =  nama fungsi yang bersifat public, nantinya nama fungsi ini akan di pakai pada
                                       class Controller (ArtikelController@store)
            -   belongsToMany =  punya hubungan 'Many' dg model class 'Kategori'
            -   App\Kategori =  directory letak model 'Kategori' di simpan
            -   detail_kategori = Nama tabel detail kategori yang berisi beberapa foreign Key (jadi ketika insert
                                  atau select data, akan ter select tabel 'kategori' dan tabel 'detail_kategori')
            -   withTimestamps() =  biar waktu nya akan ikut ter update, saat insert/update data, jadi waktune
                                    akan sama antara tabel yang ber relasi

    c.  Buat migrasi untuk Model Kategori

        -   Buat tabel migrasinya
                php artisan make:migration kategori

        -   Buat kolom untuk tabel kategori

                Schema::create('kategori', function (Blueprint $tabel)
                {
                    $tabel->increments('id');
                    $tabel->string('namaKategori');
                    $tabel->timestamps();
                });

        -   Buat tabel detail_kategori dalam file migrasi kategori (karna many to many
            jadi wajib ada tabel detail)

                Schema::create('detail_kategori', function (Blueprint $tabel)
                {
                    $tabel->integer('artikel_id')->unsigned()->index();
                    $tabel->foreign('artikel_id')->references('id')->on('artikel')->onDelete('cascade');

                    $tabel->integer('kategori_id')->unsigned()->index();
                    $tabel->foreign('kategori_id')->references('id')->on('kategori')->onDelete('cascade');

                    $tabel->timestamps();
                    });
                }

                KETERANGAN:
                -   unsigned() = agar integer selalu bernilai positif
                -   index() = agar efisiensi nantinya dalam fungsi searching, karena sudah ada index nya
                -   foreign('artikel_id') =  deklarasi bahwa 'artikel_id' merupakan sebagai kolom
                                             foreign Key dari tabel artikel
                -   foreign('kategori_id') = deklarasi bahwa 'kategori_id' merupakan sebagai kolom
                                             foreign Key dari tabel kategori
                -   onDelete('cascade') =  artinya jika tabel utama di hapus, maka kolom foreign Key juga akan terhapus
                                           (jadi kolom pada detail_kategori juga akan terhapus jika tabel kategori dan
                                           tabel artikel di hapus)

    2.  File Controllernya (ArtikelController@store)

        penjelasan lengkapnya akan di bahas di note no 24 (Membuat UI View dari Many to Many)

    3.  File View atau blade (tampilkan hasil dari ArtikelController@store)

        penjelasan lengkapnya akan di bahas di note no 24 (Membuat UI View dari Many to Many)

